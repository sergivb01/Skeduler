// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: backend.proto

package backend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BackendClient is the client API for Backend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackendClient interface {
	Create(ctx context.Context, in *JobCreateRequest, opts ...grpc.CallOption) (*Job, error)
	Get(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*Job, error)
	Update(ctx context.Context, in *UpdateJobRequest, opts ...grpc.CallOption) (*Job, error)
	Logs(ctx context.Context, in *JobLogsRequest, opts ...grpc.CallOption) (Backend_LogsClient, error)
	StreamLogs(ctx context.Context, in *JobLogsRequest, opts ...grpc.CallOption) (Backend_StreamLogsClient, error)
}

type backendClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendClient(cc grpc.ClientConnInterface) BackendClient {
	return &backendClient{cc}
}

func (c *backendClient) Create(ctx context.Context, in *JobCreateRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/skeduler.Backend/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) Get(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/skeduler.Backend/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) Update(ctx context.Context, in *UpdateJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/skeduler.Backend/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) Logs(ctx context.Context, in *JobLogsRequest, opts ...grpc.CallOption) (Backend_LogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Backend_ServiceDesc.Streams[0], "/skeduler.Backend/Logs", opts...)
	if err != nil {
		return nil, err
	}
	x := &backendLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Backend_LogsClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type backendLogsClient struct {
	grpc.ClientStream
}

func (x *backendLogsClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *backendClient) StreamLogs(ctx context.Context, in *JobLogsRequest, opts ...grpc.CallOption) (Backend_StreamLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Backend_ServiceDesc.Streams[1], "/skeduler.Backend/StreamLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &backendStreamLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Backend_StreamLogsClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type backendStreamLogsClient struct {
	grpc.ClientStream
}

func (x *backendStreamLogsClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BackendServer is the server API for Backend service.
// All implementations must embed UnimplementedBackendServer
// for forward compatibility
type BackendServer interface {
	Create(context.Context, *JobCreateRequest) (*Job, error)
	Get(context.Context, *GetJobRequest) (*Job, error)
	Update(context.Context, *UpdateJobRequest) (*Job, error)
	Logs(*JobLogsRequest, Backend_LogsServer) error
	StreamLogs(*JobLogsRequest, Backend_StreamLogsServer) error
	mustEmbedUnimplementedBackendServer()
}

// UnimplementedBackendServer must be embedded to have forward compatible implementations.
type UnimplementedBackendServer struct {
}

func (UnimplementedBackendServer) Create(context.Context, *JobCreateRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBackendServer) Get(context.Context, *GetJobRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBackendServer) Update(context.Context, *UpdateJobRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBackendServer) Logs(*JobLogsRequest, Backend_LogsServer) error {
	return status.Errorf(codes.Unimplemented, "method Logs not implemented")
}
func (UnimplementedBackendServer) StreamLogs(*JobLogsRequest, Backend_StreamLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamLogs not implemented")
}
func (UnimplementedBackendServer) mustEmbedUnimplementedBackendServer() {}

// UnsafeBackendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackendServer will
// result in compilation errors.
type UnsafeBackendServer interface {
	mustEmbedUnimplementedBackendServer()
}

func RegisterBackendServer(s grpc.ServiceRegistrar, srv BackendServer) {
	s.RegisterService(&Backend_ServiceDesc, srv)
}

func _Backend_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skeduler.Backend/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).Create(ctx, req.(*JobCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skeduler.Backend/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).Get(ctx, req.(*GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skeduler.Backend/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).Update(ctx, req.(*UpdateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BackendServer).Logs(m, &backendLogsServer{stream})
}

type Backend_LogsServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type backendLogsServer struct {
	grpc.ServerStream
}

func (x *backendLogsServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _Backend_StreamLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BackendServer).StreamLogs(m, &backendStreamLogsServer{stream})
}

type Backend_StreamLogsServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type backendStreamLogsServer struct {
	grpc.ServerStream
}

func (x *backendStreamLogsServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

// Backend_ServiceDesc is the grpc.ServiceDesc for Backend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Backend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "skeduler.Backend",
	HandlerType: (*BackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Backend_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Backend_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Backend_Update_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Logs",
			Handler:       _Backend_Logs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamLogs",
			Handler:       _Backend_StreamLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "backend.proto",
}
